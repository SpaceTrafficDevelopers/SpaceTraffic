<!DOCTYPE html>
<html>
<head>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="description" content="Space Traffic - Space trading multiplayer browser game." />
    <meta name="author" xml:lang="cs" content="Space Traffic Team" />
    <meta http-equiv="Content-Style-Type" content="text/css" />

    <title>Space Traffic</title>

    <link href='https://fonts.googleapis.com/css?family=Exo:400,800|Audiowide&subset=latin,latin-ext' rel='stylesheet' type='text/css'>
    <link href="@Url.Content("~/Content/Game.less")" rel="stylesheet" type="text/css" />
    <script type="text/javascript">
        var baseUrl = "@Url.Content("~")";
    </script>

</head>
<body>
    <h1>Hadík</h1>
    <img id="image" src="@Url.Content("~/Content/images/Account/help.png")" style="display:none;" />
    <!-- Lets make a simple snake game -->
    <canvas id="canvas" width="500" height="500"></canvas>

    @Content.Script("jquery-2.2.2.min.js", Url)
    @Content.Script("jquery-ui-1.11.4.min.js", Url)
    @Content.Script("../JS/ui/Ajax.js", Url)
    @*@Content.JSImport("~/JS/pomImport", Url)*@
    <script type="text/javascript">
        $(document).ready(function () {
            
            var canvas = $("#canvas")[0];
            
            var game = new Game(canvas);
            game.init(20, 5);
            game.start();

        })
        
        function Game(canvas) {
            this.gameArea;
            this.snake;
            this.food;
            this.score;
            this.gameLoop;
            this.canvas = canvas;
            this.contex = canvas.getContext("2d");

            var interval = 60;
            var that = this;

            this.init = function (pieceSize, snakeLength) {
                this.gameArea = new GameArea(this.canvas.width, this.canvas.height, pieceSize);
                this.snake = new Snake(snakeLength);
                this.food = new Food();

                this.snake.createSnake();
                this.food.generateFood(this.gameArea, this.snake);
                this.score = 0;

                keyBinding();
            }

            function update() {
                
                var nextPosition = that.snake.getNextPosition();

                if (that.gameArea.checkCollisionWithSnake(nextPosition) || that.snake.checkCollisoinWithSelf(nextPosition)) {
                    clearInterval(that.gameLoop);
                    return;
                }

                that.move(nextPosition);
               
                that.gameArea.paint(that.contex);
                that.snake.paint(that.contex, that.gameArea.cellSize);
                that.food.paint(that.contex, that.gameArea.cellSize);

                that.snake.updated = true;
                var score_text = "Score: " + that.score;
                that.contex.fillText(score_text, 5, that.gameArea.height - 5);
            }

            function keyBinding() {

                $(document).keydown(function (e) {
                    that.snake.changeDirection(e.which);
                });
            }

            this.move = function (nextPostion) {
                if (this.food.position.equal(nextPostion)) {
                    this.score++;
                    this.snake.move(true, nextPostion);
                    this.food.generateFood(this.gameArea, this.snake);
                }
                else
                    this.snake.move(false, nextPostion);
            }

            this.start = function () {
                /*if (typeof this.gameLoop != "undefined")
                    clearInterval(gameLoop);*/

                this.gameLoop = setInterval(update, interval);
                //this.update();
            }

        };

        function GameArea(width, height, cellSize) {
            this.width = width;
            this.height = height;
            this.cellSize = cellSize;
            this.xCellCount = width / cellSize; //maximalni index
            this.yCellCount = height / cellSize;

            this.paint = function (context) {
                context.fillStyle = "black";
                context.fillRect(0, 0, this.width, this.height);
                context.strokeStyle = "white";
                context.strokeRect(0, 0, this.width, this.height);
            }

            this.checkCollisionWithSnake = function (nextPosition) {
                if (nextPosition.x < 0 || nextPosition.y < 0
                    || nextPosition.x >= this.xCellCount || nextPosition.y >= this.yCellCount) {

                    return true;
                }

                return false;
            }
        };

        function Snake(length) {
            this.head;
            this.body;
            this.length = length;
            this.direction;
            this.updated = true;

            var that = this;

            this.createSnake = function () {
                this.body = [];
                for (var i = this.length - 1; i >= 0; i--)
                    this.body.push(new Position(i, 0));

                this.head = this.body[0];
                this.direction = Direction.RIGHT;
            }

            this.paint = function (context, cellSize) {
                for (var i = 0; i < this.body.length; i++) {
                    var bodyCell = this.body[i];

                    if (bodyCell === this.head){
                        
                    //var background = new Image();
                        //background.src = "~/Content/images/Account/help.png";
                        var img = document.getElementById("image");
                        context.drawImage(img, bodyCell.x * cellSize, bodyCell.y * cellSize, cellSize, cellSize);
                    }
                    else {
                        context.fillStyle = "blue";
                        context.fillRect(bodyCell.x * cellSize, bodyCell.y * cellSize, cellSize, cellSize);
                        context.strokeStyle = "white";
                        context.strokeRect(bodyCell.x * cellSize, bodyCell.y * cellSize, cellSize, cellSize);
                    }
                    
                }
            }

            this.checkCollisoinWithSelf = function (nextPosition) {
                for (var i = 0; i < this.body.length; i++) {
                    if (this.body[i].equal(nextPosition)){
                        alert(this.direction + " " + i + " x: " + nextPosition.x + " y: " + nextPosition.y);
                        return true;
                    }
                }
                return false;
            }

            this.move = function (eat, nextPostion) {
                if (!eat)
                    this.body.pop();
                
                this.body.unshift(nextPostion);
                this.head = this.body[0];
            }

            this.getNextPosition = function () {
                var nextPosition = new Position(this.head.x, this.head.y);

                switch (this.direction) {
                    case Direction.UP:
                        nextPosition.y--;
                        break;
                    case Direction.DOWN:
                        nextPosition.y++;
                        break;
                    case Direction.LEFT:
                        nextPosition.x--;
                        break;
                    case Direction.RIGHT:
                        nextPosition.x++;
                        break;
                }

                return nextPosition;
            }

            this.changeDirection = function (key) {
                switch(key) {
                    case Direction.UP:
                        setDirection(Direction.UP, Direction.DOWN);
                        break;
                    case Direction.DOWN:
                        setDirection(Direction.DOWN, Direction.UP);
                        break;
                    case Direction.LEFT:
                        setDirection(Direction.LEFT, Direction.RIGHT);
                        break;
                    case Direction.RIGHT:
                        setDirection(Direction.RIGHT, Direction.LEFT);
                        break;
                }
            }

            function setDirection(direction, falseDirection){
                if(that.direction != direction && that.direction != falseDirection && that.updated){
                    that.direction = direction;
                    that.updated = false;
                }
            }

            var Direction = {
                UP: 38,
                DOWN: 40,
                LEFT: 37,
                RIGHT: 39
            }
        };

        function Position(x, y) {
            this.x = x;
            this.y = y;

            this.equal = function(position){
                if(this.x == position.x && this.y == position.y)
                    return true;

                return false;
            }
        };

        function Food() {
            this.position = new Position(-1, -1);
            var that = this;

            this.generateFood = function (gameArea, snake) {
                do {
                    this.position.x = generateCoordinate(gameArea.xCellCount - 1);
                    this.position.y = generateCoordinate(gameArea.yCellCount - 1);
                } while (checkCollisionWithSnake(snake))
            }

            function generateCoordinate(maxCellIndex){
                return Math.round(maxCellIndex * Math.random());
            }

            function checkCollisionWithSnake(snake) {
                for (var i = 0; i < snake.body.length; i++) {
                    if (that.position.equal(snake.body[i]))
                        return true;
                }

                return false;
            }

            this.paint = function (context, cellSize) {
                context.fillStyle = "blue";
                context.fillRect(this.position.x * cellSize, this.position.y * cellSize, cellSize, cellSize);
                context.strokeStyle = "white";
                context.strokeRect(this.position.x * cellSize, this.position.y * cellSize, cellSize, cellSize);
            }
        }


    </script>
</body>
</html>