/**
 * @author Azaroth
 */

const ID_OBJECT_SUFFIX = "-obj";

var SvgMapItem = new Class({
	/// <summary>
	/// Modify default settings for validation.
	/// Accepts everything that Plugins/Validation/validate accepts.
	/// </summary>
	/// <param name="settings" type="Options">
	/// Options to set as default.
	/// </param>
	/// <return>SvgMapItem</return>

	initialize: function(idPrefix){
		/// <summary>
		/// Constructor for SvgMapItem
		/// </summary>
		/// <param name="idPrefix" type="Required">prefix for id of DOM elements generated by this instance.</param>
	
		this.idPrefix=idPrefix;
	},
	// Id prefix of svg elements that are part of this object.
	idPrefix : '',
	
	// Prefix of css classes used by this object.
	cssClassPrefix: 'svg',
	
	// Time set for update and build operation. Don't use property directly, use getter and setter instead.
	_t: 0,
	
	// Gets set time for build or update.
	getT : function() {
		return this._t;
	},
	
	// Sets time for build or update.
	setT : function(t){
		if (typeof t == 'number') this._t = t;
	},
	getName : function() {
	},
		
	// True, if this object requires updates. Only checked on building.
	isStatic : function() {
	},
	// Builds background for this object, like trajectory.
	buildBackground : function(t) {
	},
	//builds definitions for object graphics (like gradients or clips)
	buildDefs: function (t) {
		return '';
	},
	// Builds this object graphics.
	buildObject : function(t) {
	},
	// Builds nameplate and overlay icons.
	buildOverlay: function (t) {
	},
	//adds animation definition to style tag
	addAnimation: function (animationName, animationBody) {
		$('head').append('<style>'
			+ '@-moz-keyframes ' + animationName + ' ' + animationBody
			+ ' @-webkit-keyframes ' + animationName + ' ' + animationBody
			+ ' @keyframes ' + animationName + ' ' + animationBody
			+ '</style>');
	},
	
	buildOverlayAt: function(groupTransform) {
	},
	// Makes preparations for updating elements related to this object.
	// All calculations must be done here.
	// Returns false, if there is currently nothing to update.
	prepareUpdate : function(t) {
	},
	// Performs update of all elements.
	performUpdate : function() {
	},
	
	// Updates position by given transformation.
	updatePosition: function(groupTransform) {
	},
	// Used for making this element interactive.
	revive : function() {
	},
	
	getId: function(suffix){
		return this.idPrefix+((suffix == undefined)?'':suffix);
	}
});